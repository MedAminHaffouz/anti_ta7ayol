class i{async get(t){return new Promise(e=>{chrome.storage.local.get(t,s=>{e(s)})})}async set(t){return new Promise(e=>{chrome.storage.local.set(t,()=>{e()})})}async remove(t){return new Promise(e=>{chrome.storage.local.remove(t,()=>{e()})})}async clear(){return new Promise(t=>{chrome.storage.local.clear(()=>{t()})})}async getSettings(){const{settings:t}=await this.get(["settings"]);return{apiUrl:"http://localhost:8000",darkMode:!1,autoAnalyze:!1,showNotifications:!0,...t}}async saveSettings(t){const e=await this.getSettings();await this.set({settings:{...e,...t}})}async saveAnalysisResult(t){const{analysisHistory:e=[]}=await this.get(["analysisHistory"]),a=[{...t,id:Date.now().toString(),timestamp:Date.now()},...e].slice(0,50);await this.set({analysisHistory:a})}async getAnalysisHistory(){const{analysisHistory:t=[]}=await this.get(["analysisHistory"]);return t}async storeSelectedText(t){await this.set({selectedText:t,timestamp:Date.now()})}async getRecentSelectedText(){const{selectedText:t,timestamp:e}=await this.get(["selectedText","timestamp"]);return t&&e&&Date.now()-e<3e4?t:null}}const r=new i;export{r as s};
